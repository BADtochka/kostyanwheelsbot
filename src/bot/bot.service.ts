import { ApiService } from '@/api/api.service';
import { backKeyboard, mainKeyboard } from '@/contants/keyboards';
import { SendToOwner } from '@/types/sendToOwner';
import { convertBytes } from '@/utils/convertBytes';
import { differenceInDays, format, formatDistanceToNowStrict, fromUnixTime } from 'date-fns';
import { Action, Command, Ctx, InjectBot, Start, Update } from 'nestjs-telegraf';
import { Context, Scenes, Telegraf } from 'telegraf';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { SceneContext } from 'telegraf/typings/scenes';
import { BotHelper } from './bot.interval';

@Update()
export class BotService {
  constructor(
    private botHelper: BotHelper,
    private apiService: ApiService,
    @InjectBot() private bot: Telegraf<Context>,
  ) {}

  @Start()
  @Command('menu')
  @Action('mainMenu')
  async onStart(@Ctx() ctx: SceneContext) {
    if (ctx.scene.current) ctx.scene.leave();

    const user = await this.apiService.findUserByTelegram(ctx.from?.id!);

    if (!user) {
      await this.apiService.addTelegramUser(ctx.from!);
      ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
      return;
    }

    const availableMenu: InlineKeyboardButton[][] = [...mainKeyboard];

    if (user.telegramUser.id === Number(process.env.BOT_OWNER_ID)) {
      availableMenu.push([
        {
          text: '‚úçüèª –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
          callback_data: 'editUsers',
        },
      ]);
    }

    if (ctx.callbackQuery) {
      await ctx.editMessageText('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞ ‚ôø', {
        reply_markup: { inline_keyboard: availableMenu },
      });
      return;
    }

    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞ ‚ôø', {
      reply_markup: { inline_keyboard: availableMenu },
    });
  }

  @Action('profile')
  async profile(@Ctx() ctx: Context) {
    const user = await this.apiService.findUserByTelegram(ctx.from?.id!);
    if (!user) {
      ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
      return;
    }
    const { expire, status, subscription_url, used_traffic, username } = user;
    const parsedDate = fromUnixTime(expire!);
    const dateToExpire = expire
      ? `${format(parsedDate, 'dd.MM.yyyy')} (${formatDistanceToNowStrict(parsedDate)})`
      : '‚àû';

    await ctx.editMessageText(
      `üòé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n\nüßë‚Äçüíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: ${convertBytes(used_traffic)}\n\nüìç –°—Ç–∞—Ç—É—Å: ${status}\n\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${dateToExpire}\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É \`\`\`${subscription_url}\`\`\``,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [backKeyboard],
        },
      },
    );
  }

  @Action('requisites')
  async requisites(@Ctx() ctx: Context) {
    const { SBER, TBANK, USDT_TRC, USDT_TON, TON, BITCOIN, NOTCOIN, YOOMONEY } = process.env;
    ctx.editMessageText(
      `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ 300‚ÇΩ\n\n*–°–µ—Ä–≤–∏—Å—ã –¥–æ–Ω–∞—Ç–æ–≤ (–∫–æ–º–∏—Å—Å–∏—è ~3%)* \n[Boosty](https://boosty.to/kostyanwheels) (–¥–æ–Ω–∞—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã) \n[–°–±–æ—Ä –≤ YooMoney](${YOOMONEY}) (–æ–ø–ª–∞—Ç–∞ —Å –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∫–∞—Ä—Ç—ã)\n\n*–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã* \n–°–±–µ—Ä–±–∞–Ω–∫: \n\`${SBER}\`\n–¢–ë–∞–Ω–∫: \n\`${TBANK}\` \n\n*–ö—Ä–∏–ø—Ç–æ*\nUSDT(TRC20): \n\`${USDT_TRC}\`\nUSDT(TON): \n\`${USDT_TON}\`\nTON: \n\`${TON}\`\nBitcoin: \n\`${BITCOIN}\`\nNotcoin: \n\`${NOTCOIN}\``,
      {
        parse_mode: 'Markdown',
        link_preview_options: {
          is_disabled: true,
        },
        reply_markup: {
          inline_keyboard: [backKeyboard],
        },
      },
    );
  }

  @Action('receipt')
  async receipt(@Ctx() ctx: Scenes.SceneContext) {
    const user = await this.apiService.findUserByTelegram(ctx.callbackQuery?.from.id!);
    if (!user) {
      ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
      return;
    }
    if (!user.expire) {
      ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', {
        reply_markup: {
          inline_keyboard: [backKeyboard],
        },
      });
      return;
    }
    const expiredDays = differenceInDays(fromUnixTime(user.expire), new Date());
    if (expiredDays > 3) {
      ctx.editMessageText('‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–µ –±–æ–ª–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 3 –¥–Ω—è', {
        reply_markup: {
          inline_keyboard: [backKeyboard],
        },
      });
      return;
    }

    ctx.scene.enter('receiptSend');
  }

  @Action('editUsers')
  async editUsers(@Ctx() ctx: SceneContext) {
    ctx.scene.enter('editUsers');
  }

  async sendToOwner({ photo, document, senderName }: SendToOwner) {
    if (photo) {
      this.bot.telegram.sendPhoto(process.env.BOT_OWNER_ID, photo, {
        caption: `–í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç #${senderName}`,
      });
    } else if (document) {
      this.bot.telegram.sendDocument(process.env.BOT_OWNER_ID, document, {
        caption: `–í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç #${senderName}`,
      });
    }
  }
}
