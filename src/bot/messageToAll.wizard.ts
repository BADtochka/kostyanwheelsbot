import { AppWizard } from '@/types/SelectedIdWizard';
import { Action, Context, On, Wizard, WizardStep } from 'nestjs-telegraf';
import { Markup, Context as TelegrafContext } from 'telegraf';
import { Message, Update } from 'telegraf/types';
import { SceneContext, WizardContext } from 'telegraf/typings/scenes';
import { BotService } from './bot.service';

@Wizard('messageToAll')
export class MessageToAllWizard {
  constructor(private botService: BotService) {}

  @WizardStep(1)
  async messageToAll(@Context() ctx: SceneContext) {
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
  }

  @Action('mainMenu')
  backToMainMenu(ctx: WizardContext) {
    this.botService.onStart(ctx);
  }

  @On('message')
  async sendMessageToAll(
    @Context() ctx: TelegrafContext<Update.MessageUpdate<Message.TextMessage>> & AppWizard<{ message: string }>,
  ) {
    ctx.wizard.state.message = ctx.message.text;
    await ctx.reply(`‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ? \`${ctx.message.text}\``, {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('‚ùå –•–æ—á—É –¥–æ–º–æ–π', 'mainMenu')],
          [Markup.button.callback('üíÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', '—Åonfirm')],
        ],
      },
    });
  }

  @Action('—Åonfirm')
  async —Åonfirm(@Context() ctx: SceneContext & AppWizard<{ message: string }>) {
    const count = await this.botService.sendToAll(ctx.wizard.state.message);
    await ctx.editMessageText(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${ctx.wizard.state.message} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (${count})`);
    await ctx.scene.leave();
  }
}
